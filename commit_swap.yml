---
- name: 
  hosts: master,node
  become: yes
  vars:
    timesync_net_services:
      - hostname: pool.ntp.org
        iburst: true
      - hostname: ntp.aliyun.com
        iburst: true
    #软件版本，注意containerd的不带v
    runc: v1.2.0-rc.3
    containerd: 1.7.14
    crictl: v1.31.1
    # 设置构架
    architecture: amd64
    # 设置web代理
    proxy_url: http://192.168.3.32:10811

  roles:
    - role: commit_swap
    - linux-system-roles.timesync

  tasks: 
    - name: Ensure .ssh directory exists
      file:
        path: /root/.ssh
        state: directory
        mode: '0700'

    - name: Generate SSh key pair
      openssh_keypair:
        path: /root/.ssh/id_rsa
        type: rsa
        size: 4096
        state: present
      register: ssh_key
      when: '"master" in group_names'

    - name: add ssh keyecdsa public
      template:
        src: /home/syl/ansible/known_hosts.j2
        dest: /root/.ssh/known_hosts
        mode: "0600"
        backup: yes
      when: "'master' in group_names"

    - name: 读取公钥到变量
      shell: cat /root/.ssh/id_rsa.pub
      register: master_pubkey
      when: "'master' in group_names"

    - name: 将公钥保存到本地
      shell:
        cmd: |
          echo "{{ master_pubkey.stdout }}" >> pubkey.txt
      delegate_to: localhost
      register: result
      when: "'master' in group_names"
      become: no

    - name: 分发pubkey
      copy: 
        src: pubkey.txt
        dest: /root/.ssh/authorized_keys
        owner: root
        group: root
        mode: "0600"
      when: "'node' in group_names"

    - name: ssh configb pubkeyAuthenication yes
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: "^#?PubkeyAuthentication\\s+.*"
        line: "PubkeyAuthentication yes"

    - name: ssh config PermitRootLogin yes
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin\\s+.*"
        line: "PermitRootLogin yes"

    - name: restart sshd
      systemd_service: 
        state: restarted
        daemon_reload: true
        name: sshd

    - name: update hostname
      hostname:
        name: "{{ hostname | default('localhost.localdomain') }}"
        use: systemd  

    - name: update hosts 
      template:
        src: /home/syl/ansible-for-k8s/hosts.j2
        dest: /etc/hosts
        backup: yes


    - name: 关闭防火墙
      systemd:
        name: firewalld
        state: stopped
        enabled: no
      when: ansible_facts.services['firewalld.service'] is defined

    - name: 关闭防火墙
      systemd:
        name: iptables
        state: stopped
        enabled: no
      when: ansible_facts.services['iptables.service'] is defined
#      when: ansible_facts.services['iptables.service'] is not none and ansible_facts.services['iptables.service'] is defined 
      ignore_errors: yes

    - name: 关闭selinux
      selinux: 
        policy: targeted
        state: permissive

    # 安装版本在repo中指定，指定那版本后续安装就是那个版本。
    - name: copy k8s repo to /etc/yum.repos.d/
      copy:
        src: /home/syl/ansible-for-k8s/k8s.repo
        dest: /etc/yum.repos.d/
      
    - name: 安装epel podman bash-completion
      yum:
        name: ['epel-release','podman','bash-completion']
        state: latest

    - name: 安装代理软件
      yum:
        name: proxychains-ng
        state: latest

    - name: 注释原示例代理
      lineinfile:
        path: /etc/proxychains.conf
        regexp: '^socks4'
        state: absent

    - name: 配置代理
      lineinfile:
        path: /etc/proxychains.conf
        line: 'socks5 192.168.3.32 10810'

    - name: 下载软件包
      shell: proxychains4 dnf install --downloadonly kubelet kubeadm kubectl --disableexcludes=kubernetes -y

    - name: 添加内核参数
      lineinfile:
        path: /etc/modules-load.d/containerd.conf
        line: "{{ item }}"
        create: yes
      with_items:
          - 'overlay'
          - 'br_netfilter'

    - name: 添加ipvs配置文件
      lineinfile:
        path: /etc/modules-load.d/ipvs.conf
        line: "{{ item }}"
        create: yes
      with_items:
        - 'ip_vs'
        - 'ip_vs_rr'
        - 'ip_vs_wrr'
        - 'ip_vs_sh'

    - name: 加载内核
      shell: modprobe "{{ item }}"
      with_items:
        - 'overlay'
        - 'br_netfilter'
        - 'ip_vs'
        - 'ip_vs_rr'
        - 'ip_vs_wrr'
        - 'ip_vs_sh'

    - name: 添加kubernetes配置文件
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
        create: yes
      with_items:
        - 'net.bridge.bridge-nf-call-ip6tables = 1'
        - 'net.bridge.bridge-nf-call-iptables = 1'
        - 'net.ipv4.ip_forward = 1'
        - 'user.max_user_namespaces=28633'
    - name: 重载配置
      shell: sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf

    - name: install ipset ipvsadm
      yum:
        name: ['ipset', 'ipvsadm']
        state: latest

    - name: download packages
      get_url:
        url: "{{ item }}"
        dest: /tmp 
        use_proxy: true
      environment: 
        http_proxy: "{{ proxy_url }}"
        https_proxy: "{{ proxy_url }}"
      with_items: #默认是x86构架，如是其他构架，按需修改
        - 'https://github.com/containerd/containerd/releases/download/v{{ containerd }}/containerd-{{ containerd }}-linux-{{ architecture }}.tar.gz'
        - 'https://github.com/opencontainers/runc/releases/download/{{ runc }}/runc.{{ architecture }}'
        - 'https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl }}/crictl-{{ crictl }}-linux-{{ architecture }}.tar.gz'

    - name: 解压和安装软件
      unarchive:
        src: /tmp/containerd-{{ containerd }}-linux-{{ architecture }}.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: 解压crictl
      unarchive:
        src: /tmp/crictl-{{ crictl }}-linux-{{ architecture }}.tar.gz
        dest: /tmp
        remote_src: yes

    - name: 安装crictl
      shell: install -m 755 /tmp/crictl /usr/local/bin/crictl
    - name: 安装runc
      shell: install -m 755 /tmp/runc.{{ architecture }} /usr/local/sbin/runc
      
    - name: 配置containerd
      shell: "{{ item }}"
      with_items: 
        - mkdir -p /etc/containerd
        - /usr/local/bin/containerd config default > /etc/containerd/config.toml
        - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
        - sed -i 's,sandbox_image = "registry.k8s.io/pause:3.8",sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.9",g' /etc/containerd/config.toml

    - name: 下载systemd tages
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system
        use_proxy: true
      environment: 
        http_proxy: "{{ proxy_url }}"
        https_proxy: "{{ proxy_url }}"

    - name: 元神启动
      shell: "{{ item }}"
      with_items:
        - systemctl daemon-reload
        - systemctl enable containerd --now 
        - systemctl status containerd

    - name: install kubelet、kubeadm 、kubectl
      yum:
        name: ['kubelet','kubeadm','kubectl']
        disable_excludes: kubernetes
        state: latest
      tags: install_package

#    - name: 分发containerd配置文件
#      copy:
#        src: /home/syl/ansible-for-k8s/containerd
#        dest: /etc/
#
    - name: 分发kube-flannel文件
      copy:
        src: /home/syl/ansible-for-k8s/kube-flannel.yml
        dest: /root/

    - name: 添加kubectl、kubeadm自动补全
      shell: "{{ item }}"
      with_items:
        - echo "source <(kubectl completion bash)" >> /root/.bashrc
        - echo "source <(kubeadm completion bash)" >> /root/.bashrc

    - name: enable kubelet
      systemd:
        name: kubelet
        state: started
        enabled: yes
      notify: reboot system

  handlers:
    - name: reboot system
      reboot:

